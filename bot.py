import os
import telebot
from telebot import types
from dotenv import load_dotenv
import logging
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import email.utils
import requests
from io import BytesIO
import json
import re
from datetime import datetime
from threading import Thread
from flask import Flask, jsonify
import time
import uuid
import sys
import socket
import subprocess
import atexit

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–æ—Ü–µ—Å—Å–∞
PROCESS_ID = str(uuid.uuid4())[:8]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º debug –¥–ª—è urllib3
logging.getLogger('urllib3').setLevel(logging.WARNING)

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'https://11021983a.github.io/Docky/')
SMTP_SERVER = os.getenv('SMTP_SERVER', 'smtp.mail.ru')
SMTP_PORT = int(os.getenv('SMTP_PORT', '465'))
EMAIL_USER = os.getenv('EMAIL_USER', 'docs_zs@mail.ru')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
USE_SSL = os.getenv('USE_SSL', 'true').lower() == 'true'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
if not BOT_TOKEN:
    print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")
    print("–î–æ–±–∞–≤—å—Ç–µ –≤ Environment Variables: BOT_TOKEN")
    exit()

if not EMAIL_PASSWORD:
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ –Ω–∞–π–¥–µ–Ω EMAIL_PASSWORD")
    print("–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Mail.ru –≤ Environment Variables")

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è health check
app = Flask(__name__)

@app.route('/')
def home():
    return jsonify({"status": "alive", "bot": "–î–æ–∫–∏", "version": "1.0"})

@app.route('/health')
def health():
    return jsonify({"status": "healthy"}), 200

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è health check"""
    port = int(os.environ.get('PORT', 10000))
    try:
        app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)
    except OSError as e:
        if "Address already in use" in str(e):
            logger.error(f"–ü–æ—Ä—Ç {port} —É–∂–µ –∑–∞–Ω—è—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ Flask")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Flask: {e}")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

# –î–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ö
ASSETS = {
    '–±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä': {
        'icon': 'üè¢',
        'title': '–ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä',
        'description': '–û—Ñ–∏—Å–Ω—ã–µ –∑–¥–∞–Ω–∏—è –∏ –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä—ã',
        'filename': '–ë–¶.docx',
        'url': 'https://github.com/11021983A/Docky/raw/main/–ë–¶.docx'
    },
    '—Ç–æ—Ä–≥–æ–≤—ã–π-—Ü–µ–Ω—Ç—Ä': {
        'icon': 'üõçÔ∏è',
        'title': '–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä',
        'description': '–¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –∫–æ–º–ø–ª–µ–∫—Å—ã',
        'filename': '–¢–¶.docx',
        'url': 'https://github.com/11021983A/Docky/raw/main/–¢–¶.docx'
    },
    '—Å–∫–ª–∞–¥—Å–∫–æ–π-–∫–æ–º–ø–ª–µ–∫—Å': {
        'icon': 'üì¶',
        'title': '–°–∫–ª–∞–¥—Å–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å',
        'description': '–°–∫–ª–∞–¥—Å–∫–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è –∏ –∫–æ–º–ø–ª–µ–∫—Å—ã',
        'filename': '–°–∫–ª–∞–¥.docx',
        'url': 'https://github.com/11021983A/Docky/raw/main/–°–∫–ª–∞–¥.docx'
    },
    '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞': {
        'icon': 'üè®',
        'title': '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞',
        'description': '–ì–æ—Å—Ç–∏–Ω–∏—á–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã',
        'filename': '–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞.docx',
        'url': 'https://github.com/11021983A/Docky/raw/main/–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞.docx'
    },
    '–±–∏–∑–Ω–µ—Å': {
        'icon': 'üíº',
        'title': '–ë–∏–∑–Ω–µ—Å',
        'description': '–î–æ–ª–∏ –≤ –±–∏–∑–Ω–µ—Å–µ –∏ –∞–∫—Ü–∏–∏',
        'filename': '–ë–∏–∑–Ω–µ—Å_–ö–ò.docx',
        'url': 'https://github.com/11021983A/Docky/raw/main/–ë–∏–∑–Ω–µ—Å_–ö–ò.docx'
    },
    '–∫–æ–º–ø–ª–µ–∫—Å-–∏–º—É—â–µ—Å—Ç–≤–∞': {
        'icon': 'üóóÔ∏è',
        'title': '–ö–æ–º–ø–ª–µ–∫—Å –∏–º—É—â–µ—Å—Ç–≤–∞',
        'description': '–ò–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã',
        'filename': '–ë–∏–∑–Ω–µ—Å_–ö–ò.docx',
        'url': 'https://github.com/11021983A/Docky/raw/main/–ë–∏–∑–Ω–µ—Å_–ö–ò.docx'
    },
    '–º–∞—à–∏–Ω—ã-–∏-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ': {
        'icon': '‚öôÔ∏è',
        'title': '–ú–∞—à–∏–Ω—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
        'description': '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
        'filename': '–ú–∏–û.docx',
        'url': 'https://github.com/11021983A/Docky/raw/main/–ú–∏–û.docx'
    },
    '–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ-–ø—Ä–∞–≤–∞-–Ω–∞-–∂–∏–ª—å–µ': {
        'icon': 'üè†',
        'title': '–ò–ü–° –Ω–∞ –∂–∏–ª—å–µ',
        'description': '–ü—Ä–∞–≤–∞ –Ω–∞ –∂–∏–ª—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
        'filename': '–ò–ü–°_–∂–∏–ª—å–µ.docx',
        'url': 'https://github.com/11021983A/Docky/raw/main/–ò–ü–°_–∂–∏–ª—å–µ.docx'
    }
}

def validate_email(email: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def send_email_with_document(recipient_email: str, asset_type: str, user_name: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ Mail.ru"""
    if not EMAIL_USER:
        logger.error("EMAIL_USER –Ω–µ –∑–∞–¥–∞–Ω")
        return False
    
    if not EMAIL_PASSWORD:
        logger.error("EMAIL_PASSWORD –Ω–µ –∑–∞–¥–∞–Ω")
        return False
    
    logger.info(f"=" * 50)
    logger.info(f"–ù–ê–ß–ê–õ–û –û–¢–ü–†–ê–í–ö–ò EMAIL")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {EMAIL_USER}")
    logger.info(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_email}")
    logger.info(f"–ê–∫—Ç–∏–≤: {asset_type}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")
    logger.info(f"SMTP: {SMTP_SERVER}:{SMTP_PORT}")
    logger.info(f"=" * 50)
    
    try:
        asset = ASSETS.get(asset_type)
        if not asset:
            logger.error(f"–ê–∫—Ç–∏–≤ {asset_type} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ASSETS")
            return False
            
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = MIMEMultipart()
        msg['From'] = EMAIL_USER
        msg['To'] = recipient_email
        msg['Subject'] = f'–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ª–æ–≥–∞ - {asset["title"]}'
        msg['Reply-To'] = EMAIL_USER
        msg['Date'] = email.utils.formatdate(localtime=True)
        msg['Message-ID'] = email.utils.make_msgid()
        
        # HTML —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
        html_body = f"""
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; }}
                .info-box {{ background: #f8f9fa; border-left: 4px solid #007bff; padding: 15px; margin: 15px 0; }}
                .footer {{ background: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h2>{asset['icon']} –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã</h2>
                <p>–¢–∏–ø –∞–∫—Ç–∏–≤–∞: {asset['title']}</p>
            </div>
            
            <div class="content">
                <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!</p>
                
                <p>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞! –í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–ª–æ–≥–∞ —Ç–∏–ø–∞ <strong>"{asset['title']}"</strong>.</p>
                
                <div class="info-box">
                    <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–µ:</h4>
                    <ul>
                        <li><strong>–¢–∏–ø:</strong> {asset['description']}</li>
                        <li><strong>–§–∞–π–ª:</strong> {asset['filename']}</li>
                    </ul>
                </div>
            </div>
            
            <div class="footer">
                <p>–≠—Ç–æ –ø–∏—Å—å–º–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ "–î–æ–∫–∏"</p>
            </div>
        </body>
        </html>
        """
        
        msg.attach(MIMEText(html_body, 'html', 'utf-8'))
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
        try:
            document_url = asset['url']
            logger.info(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å URL: {document_url}")
            response = requests.get(document_url, timeout=30, headers={
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            })
            
            if response.status_code == 200:
                attachment = MIMEBase('application', 'octet-stream')
                attachment.set_payload(response.content)
                encoders.encode_base64(attachment)
                attachment.add_header(
                    'Content-Disposition',
                    f'attachment; filename="{asset["filename"]}"'
                )
                msg.attach(attachment)
                logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {asset['filename']} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –ø–∏—Å—å–º—É, —Ä–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: HTTP {response.status_code}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        logger.info(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É {SMTP_SERVER}:{SMTP_PORT} (SSL: {USE_SSL})")
        
        try:
            if USE_SSL or SMTP_PORT == 465:
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º SSL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                server = smtplib.SMTP_SSL(SMTP_SERVER, 465, timeout=30)
                server.set_debuglevel(1)
            else:
                logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º TLS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT, timeout=30)
                server.set_debuglevel(1)
                server.starttls()
            
            logger.info(f"–õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ {EMAIL_USER}")
            server.login(EMAIL_USER, EMAIL_PASSWORD)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –Ω–∞ {recipient_email}")
            logger.info(f"From: {EMAIL_USER}")
            logger.info(f"To: {recipient_email}")
            
            try:
                server.sendmail(EMAIL_USER, [recipient_email], msg.as_string())
                logger.info("–ú–µ—Ç–æ–¥ sendmail —É—Å–ø–µ—à–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ sendmail: {e}")
                try:
                    server.send_message(msg)
                    logger.info("–ú–µ—Ç–æ–¥ send_message —É—Å–ø–µ—à–µ–Ω")
                except Exception as e2:
                    logger.error(f"–û—à–∏–±–∫–∞ send_message: {e2}")
                    raise
            
            server.quit()
            logger.info(f"Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {recipient_email}")
            return True
            
        except smtplib.SMTPAuthenticationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ SMTP: {e}")
            logger.error("–ü–†–û–í–ï–†–¨–¢–ï: EMAIL_PASSWORD –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–∞—Ä–æ–ª–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Mail.ru, –ù–ï –æ–±—ã—á–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º!")
        except smtplib.SMTPServerDisconnected as e:
            logger.error(f"–°–µ—Ä–≤–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {e}")
        except smtplib.SMTPException as e:
            logger.error(f"SMTP –æ—à–∏–±–∫–∞: {e}")
        
        return False
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π traceback:")
        return False

@bot.message_handler(commands=['start'])
def start_command(message):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Web App"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    username = message.from_user.username
    
    user_sessions[user_id] = {
        'name': user_name,
        'username': username,
        'started_at': datetime.now()
    }
    
    keyboard = types.InlineKeyboardMarkup()
    webapp_btn = types.InlineKeyboardButton(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤",
        web_app=types.WebAppInfo(url=WEBAPP_URL)
    )
    keyboard.add(webapp_btn)
    
    welcome_text = f"""
ü§ñ –ü—Ä–∏–≤–µ—Ç, {user_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç **–î–æ–∫–∏**!

üìã –Ø –ø–æ–º–æ–≥–∞—é —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∑–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –°–±–µ—Ä–∞.

üöÄ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ—á–µ–Ω—å —Ç—Ä–µ–±—É–µ–º—ã—Ö –¥–ª—è –∑–∞–ª–æ–≥–æ–≤–æ–π —Å–ª—É–∂–±—ã –ë–∞–Ω–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ email  

üì± **–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ**, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —É–¥–æ–±–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram!
"""
    
    bot.send_message(
        message.chat.id,
        welcome_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['help', 'info'])
def help_command(message):
    """–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    help_text = f"""
ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –î–æ–∫–∏**

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üìã Web-–∫–∞—Ç–∞–ª–æ–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤—Å—Ç—Ä–æ–µ–Ω –≤ Telegram)
üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ email
üìû –ü—Ä—è–º–∞—è —Å–≤—è–∑—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã ({len(ASSETS)} —Ç–∏–ø–æ–≤):**
"""
    
    for asset_type, asset in ASSETS.items():
        help_text += f"{asset['icon']} **{asset['title']}**\n"
    
    help_text += f"""

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/contacts` - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
‚Ä¢ `/test_email` - –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ email

**–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:** {WEBAPP_URL}

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!
"""
    
    keyboard = types.InlineKeyboardMarkup()
    webapp_btn = types.InlineKeyboardButton(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤", 
        web_app=types.WebAppInfo(url=WEBAPP_URL)
    )
    keyboard.add(webapp_btn)
    
    bot.send_message(
        message.chat.id,
        help_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['contacts'])
def contacts_command(message):
    """–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    contacts_text = """
üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏**

üìß **Email:** docs_zs@mail.ru
ü§ñ **Telegram:** @your_docs_bot  
üì± **WhatsApp:** +7 (XXX) XXX-XX-XX

‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:**
–ü–Ω-–ü—Ç: 9:00 - 18:00
–°–±-–í—Å: 10:00 - 16:00

üìã **–í–µ–±-–∫–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω 24/7**
"""
    
    keyboard = types.InlineKeyboardMarkup()
    webapp_btn = types.InlineKeyboardButton(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤", 
        web_app=types.WebAppInfo(url=WEBAPP_URL)
    )
    email_btn = types.InlineKeyboardButton(
        "üìß –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –ø–æ—á—Ç—É", 
        url=f"mailto:{EMAIL_USER}"
    )
    keyboard.add(webapp_btn)
    keyboard.add(email_btn)
    
    bot.send_message(
        message.chat.id,
        contacts_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    try:
        if call.data == "help":
            help_command(call.message)
        elif call.data == "contacts":
            contacts_command(call.message)
        
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App"""
    logger.info("üîî –í–´–ó–í–ê–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö WEB_APP_DATA")
    logger.info(f"   üì± –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}")
    logger.info(f"   üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.first_name} (ID: {message.from_user.id})")
    
    try:
        if not hasattr(message, 'web_app_data') or not message.web_app_data:
            logger.error("‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• WEB_APP_DATA –í –°–û–û–ë–©–ï–ù–ò–ò")
            bot.reply_to(message, "‚åõ –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            return
        
        if not hasattr(message.web_app_data, 'data') or not message.web_app_data.data:
            logger.error("‚ùå –ü–£–°–¢–´–ï –î–ê–ù–ù–´–ï –í WEB_APP_DATA")
            bot.reply_to(message, "‚åõ –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            return
        
        logger.info(f"   üìã –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {message.web_app_data.data}")
        
        web_app_data = json.loads(message.web_app_data.data)
        action = web_app_data.get('action')
        
        user_id = message.from_user.id
        user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        logger.info(f"üì± –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –û–¢ WEB APP:")
        logger.info(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})")
        logger.info(f"   üéØ –î–µ–π—Å—Ç–≤–∏–µ: {action}")
        logger.info(f"   üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {web_app_data}")
        
        if action == 'send_email':
            email = web_app_data.get('email')
            asset_type = web_app_data.get('asset_type')
            
            logger.info(f"üìß –ó–ê–ü–†–û–° –ù–ê –û–¢–ü–†–ê–í–ö–£ EMAIL:")
            logger.info(f"   üì¨ Email: {email}")
            logger.info(f"   üìÑ –ê–∫—Ç–∏–≤: {asset_type}")
            
            if not email:
                logger.error("‚ùå Email –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
                bot.reply_to(message, "‚åõ Email –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω")
                return
            
            if not validate_email(email):
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email: {email}")
                bot.reply_to(message, f"‚åõ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∞–¥—Ä–µ—Å–∞: {email}")
                return
            
            if asset_type not in ASSETS:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫—Ç–∏–≤: {asset_type}")
                logger.error(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã: {list(ASSETS.keys())}")
                bot.reply_to(message, f"‚åõ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–∫—Ç–∏–≤–∞: {asset_type}")
                return
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            bot.reply_to(message, f"üìß –ü–∏—Å—å–º–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}")
            
            logger.info(f"üìÆ –ù–ê–ß–ò–ù–ê–ï–ú –û–¢–ü–†–ê–í–ö–£ EMAIL:")
            logger.info(f"   üì¨ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {email}")
            logger.info(f"   üìÑ –¢–∏–ø –∞–∫—Ç–∏–≤–∞: {asset_type}")
            logger.info(f"   üë§ –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {user_name}")
            
            success = send_email_with_document(email, asset_type, user_name)
            
            asset = ASSETS[asset_type]
            
            if success:
                logger.info(f"‚úÖ EMAIL –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù –Ω–∞ {email}")
                response_text = f"""
‚úÖ **–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!**

üìß **Email:** {email}
üìÑ **–ê–∫—Ç–∏–≤:** {asset['icon']} {asset['title']}

üì¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞ –∏ –ø–∞–ø–∫—É "–°–ø–∞–º".

üìÑ –ù—É–∂–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∞–∫—Ç–∏–≤–∞? –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ —Å–Ω–æ–≤–∞!
"""
                keyboard = types.InlineKeyboardMarkup()
                webapp_btn = types.InlineKeyboardButton(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤", 
                    web_app=types.WebAppInfo(url=WEBAPP_URL)
                )
                keyboard.add(webapp_btn)
                
                bot.send_message(
                    message.chat.id, 
                    response_text, 
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
                
                if ADMIN_CHAT_ID:
                    admin_msg = f"üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\nüë§ {user_name} (@{message.from_user.username})\nüìÑ {asset['title']}\nüìß {email}"
                    try:
                        bot.send_message(ADMIN_CHAT_ID, admin_msg)
                        logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
            else:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò EMAIL –Ω–∞ {email}")
                bot.send_message(
                    message.chat.id,
                    f"‚åõ **–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email**\n\n"
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è {asset['icon']} {asset['title']} –Ω–∞ –∞–¥—Ä–µ—Å {email}.\n\n"
                    f"üìÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email\n"
                    f"‚Ä¢ –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é\n"
                    f"‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: {EMAIL_USER}\n\n"
                    f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /test_email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
                    parse_mode='Markdown'
                )
        
        elif action == 'download_completed':
            asset_type = web_app_data.get('asset_type')
            logger.info(f"üì• –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û:")
            logger.info(f"   üìÑ –ê–∫—Ç–∏–≤: {asset_type}")
            logger.info(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")
            
            if asset_type in ASSETS:
                asset = ASSETS[asset_type]
                
                response_text = f"""
‚úÖ **–î–æ–∫—É–º–µ–Ω—Ç —Å–∫–∞—á–∞–Ω!**

üìÑ **–ê–∫—Ç–∏–≤:** {asset['icon']} {asset['title']}
üìÇ **–§–∞–π–ª:** {asset['filename']}
"""
                
                keyboard = types.InlineKeyboardMarkup()
                webapp_btn = types.InlineKeyboardButton(
                    "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤", 
                    web_app=types.WebAppInfo(url=WEBAPP_URL)
                )
                keyboard.add(webapp_btn)
                
                bot.reply_to(
                    message, 
                    response_text, 
                    parse_mode='Markdown',
                    reply_markup=keyboard
                )
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫—Ç–∏–≤ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {asset_type}")
        
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {action}")
            logger.warning(f"   –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {web_app_data}")
        
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Web App: {e}")
        logger.error(f"   –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {message.web_app_data.data if hasattr(message, 'web_app_data') and message.web_app_data else '–ù–ï–¢ –î–ê–ù–ù–´–•'}")
        bot.reply_to(message, "‚åõ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.exception("üìã –ü–æ–ª–Ω—ã–π traceback:")
        bot.reply_to(message, "‚åõ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@bot.message_handler(commands=['test_send'])
def test_send_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"""
    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /test_send email@example.com")
        return
    
    test_email = parts[1]
    if not validate_email(test_email):
        bot.reply_to(message, f"‚åõ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email: {test_email}")
        return
    
    test_data = {
        'action': 'send_email',
        'asset_type': '–±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä',
        'email': test_email
    }
    
    user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ /test_send")
    logger.info(f"–î–∞–Ω–Ω—ã–µ: {test_data}")
    
    bot.reply_to(message, f"üìß –¢–µ—Å—Ç–∏—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ {test_email}...")
    
    success = send_email_with_document(test_email, '–±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä', user_name)
    
    if success:
        bot.reply_to(message, f"‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {test_email}!")
    else:
        bot.reply_to(message, f"‚åõ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {test_email}")

@bot.message_handler(commands=['test_email'])
def test_email_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
    user_name = message.from_user.first_name or "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    if not EMAIL_USER or not EMAIL_PASSWORD:
        bot.reply_to(message, "‚åõ Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return
    
    parts = message.text.split()
    if len(parts) > 1:
        test_email = parts[1]
        if not validate_email(test_email):
            bot.reply_to(message, f"‚åõ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email: {test_email}")
            return
    else:
        test_email = EMAIL_USER
    bot.reply_to(message, f"üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –Ω–∞ {test_email}...")
    
    success = send_email_with_document(test_email, '–±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä', user_name)
    
    if success:
        bot.reply_to(message, f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {test_email}!\nüì¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –ø–∞–ø–∫—É –°–ø–∞–º.")
    else:
        bot.reply_to(message, f"‚åõ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ {test_email}.\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.")

@bot.message_handler(func=lambda message: True)
def handle_text_messages(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(f"üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï:")
    logger.info(f"   üë§ –û—Ç: {message.from_user.first_name} (ID: {message.from_user.id})")
    logger.info(f"   üìù –¢–∏–ø: {message.content_type}")
    logger.info(f"   üìÑ –¢–µ–∫—Å—Ç: {message.text if hasattr(message, 'text') else '–ù–ï–¢ –¢–ï–ö–°–¢–ê'}")
    
    if message.content_type == 'web_app_data':
        logger.info("üîÑ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ web_app_data, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
        return
    
    user_message = message.text.lower() if hasattr(message, 'text') and message.text else ""
    
    found_assets = []
    for asset_key, asset_data in ASSETS.items():
        if (any(word in user_message for word in asset_key.split('-')) or
            any(word in user_message for word in asset_data['title'].lower().split())):
            found_assets.append((asset_key, asset_data))
    
    if found_assets:
        if len(found_assets) == 1:
            asset_key, asset_data = found_assets[0]
            
            response_text = f"""
{asset_data['icon']} **{asset_data['title']}**

üìù {asset_data['description']}

üéØ **–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?**
"""
            
            keyboard = types.InlineKeyboardMarkup()
            
            webapp_url_with_asset = f"{WEBAPP_URL}?asset={asset_key}"
            webapp_btn = types.InlineKeyboardButton(
                f"üìã –û—Ç–∫—Ä—ã—Ç—å {asset_data['title']}", 
                web_app=types.WebAppInfo(url=webapp_url_with_asset)
            )
            keyboard.add(webapp_btn)
            
            catalog_btn = types.InlineKeyboardButton(
                "üìö –í–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥", 
                web_app=types.WebAppInfo(url=WEBAPP_URL)
            )
            keyboard.add(catalog_btn)
            
        else:
            assets_text = '\n'.join([
                f"‚Ä¢ {data['icon']} {data['title']}" 
                for _, data in found_assets
            ])
            
            response_text = f"""
üîç **–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–æ–≤: {len(found_assets)}**

{assets_text}

üìã **–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞:**
"""
            
            keyboard = types.InlineKeyboardMarkup()
            webapp_btn = types.InlineKeyboardButton(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤", 
                web_app=types.WebAppInfo(url=WEBAPP_URL)
            )
            keyboard.add(webapp_btn)
        
        bot.reply_to(
            message, 
            response_text, 
            parse_mode='Markdown',
            reply_markup=keyboard
        )
        
    else:
        response_text = f"""
ü§ñ –ü–æ–Ω—è–ª –≤–∞—Å –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ—á–Ω–æ.

üìã **–î–æ—Å—Ç—É–ø–Ω–æ {len(ASSETS)} —Ç–∏–ø–æ–≤ –∞–∫—Ç–∏–≤–æ–≤:**
"""
        
        for i, (_, asset_data) in enumerate(list(ASSETS.items())[:4]):
            response_text += f"{asset_data['icon']} {asset_data['title']}\n"
        
        if len(ASSETS) > 4:
            response_text += f"...–∏ –µ—â–µ {len(ASSETS) - 4}\n"
        
        response_text += "\nüí° **–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞:**"
        
        keyboard = types.InlineKeyboardMarkup()
        webapp_btn = types.InlineKeyboardButton(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤", 
            web_app=types.WebAppInfo(url=WEBAPP_URL)
        )
        help_btn = types.InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")
        keyboard.add(webapp_btn)
        keyboard.add(help_btn)
        
        bot.reply_to(
            message, 
            response_text, 
            parse_mode='Markdown',
            reply_markup=keyboard
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Telegram Web App –±–æ—Ç–∞ '–î–æ–∫–∏' [Process: {PROCESS_ID}]")
    logger.info(f"üì± Web App URL: {WEBAPP_URL}")
    logger.info(f"üìß Email: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if EMAIL_USER and EMAIL_PASSWORD else '‚åõ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    logger.info(f"üëÆ –ê–¥–º–∏–Ω: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if ADMIN_CHAT_ID else '‚åõ –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    
    print("=" * 50)
    print(f"ü§ñ TELEGRAM WEB APP –ë–û–¢ '–î–û–ö–ò' –ó–ê–ü–£–©–ï–ù [{PROCESS_ID}]")
    print("=" * 50)
    print(f"üì± Web App: {WEBAPP_URL}")
    print(f"üìß Email: {EMAIL_USER}")
    print(f"üåê Health Check: http://localhost:{os.environ.get('PORT', 10000)}")
    print(f"üìß –§—É–Ω–∫—Ü–∏–∏:")
    print("   ‚úÖ Telegram Web App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    print("   ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ Mail.ru")
    print("   ‚úÖ HTTP Health Check –¥–ª—è Render")
    print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("   ‚úÖ –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
    print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("   ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /test_email")
    print("=" * 50)
    
    try:
        bot.remove_webhook()
        bot.delete_webhook()
        try:
            updates = bot.get_updates(timeout=1)
            if updates:
                last_update_id = updates[-1].update_id
                bot.get_updates(offset=last_update_id + 1, timeout=1)
        except:
            pass
        logger.info("‚úÖ Webhook –æ—á–∏—â–µ–Ω, —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    except telebot.apihelper.ApiTelegramException as e:
        if "Conflict" in str(e):
            logger.error("‚åõ –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω")
            logger.error("–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Render")
            sys.exit(1)
    except Exception as e:
        logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ webhook: {e}")
    
    time.sleep(2)
    
    try:
        bot_info = bot.get_me()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram: @{bot_info.username}")
        
        try:
            port = int(os.environ.get('PORT', 10000))
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = sock.connect_ex(('127.0.0.1', port))
            sock.close()
            
            if result != 0:
                flask_thread = Thread(target=run_flask)
                flask_thread.daemon = True
                flask_thread.start()
                logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ—Ä—Ç {port} —É–∂–µ –∑–∞–Ω—è—Ç, Flask –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Flask: {e}")
        
        time.sleep(2)
        
        logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        bot.polling(none_stop=True, timeout=60, skip_pending=True)
        
    except telebot.apihelper.ApiTelegramException as e:
        if "Conflict" in str(e):
            logger.error("‚åõ –ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            logger.error("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥")
            time.sleep(30)
            main()
        else:
            logger.error(f"Telegram API –æ—à–∏–±–∫–∞: {e}")
            raise
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        if ADMIN_CHAT_ID:
            try:
                bot.send_message(
                    ADMIN_CHAT_ID, 
                    f"üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:**\n```\n{str(e)}\n```",
                    parse_mode='Markdown'
                )
            except:
                pass
        
        print("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(5)
        main()

if __name__ == '__main__':
    main()
